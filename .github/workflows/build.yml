name: Geteway service CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  package:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      outputs:
        jar_version: ${{ steps.bump.outputs.jar_version }}

      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 11
            distribution: 'adopt'
            server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
            settings-path: ${{ github.workspace }} # location for the settings.xml file
        - name: Bump jar version
          id: bump
          run: |
              POMPATH=api-getway-service
              OLD_VERSION=$(cd $POMPATH && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
              BUMP_MODE="none"
              old="$OLD_VERSION"
              parts=( ${old//./ } )
              bv=$((parts[2] + 1))
              NEW_VERSION="${parts[0]}.${parts[1]}.${bv}"
              echo "pom.xml at" $POMPATH "will be bumped from" $OLD_VERSION "to" $NEW_VERSION
              mvn -q versions:set -DnewVersion="${NEW_VERSION}" --file $POMPATH/pom.xml
              echo ::set-output name=jar_version::${NEW_VERSION}
        - name: Build a package
          run: mvn -B package --file ./pom.xml -DskipTests
          
        - name: Temporarily save jar artifact
          uses: actions/upload-artifact@v2
          with:
            name: jar-artifact
            path: ${{ github.workspace }}/api-getway-service/target/*.jar
            retention-days: 1
  deploy:
      runs-on: ubuntu-latest
      needs: [package]
      steps:
        - name: Check out code
          uses: actions/checkout@v2
        - name: download-artifact
          uses: actions/download-artifact@v1
          with:
              name: jar-artifact
              path: target/
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: api-gateway-service
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
